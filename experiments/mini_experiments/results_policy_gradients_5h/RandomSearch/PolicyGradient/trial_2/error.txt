Traceback (most recent call last):
  File "/cs/student/ug/2020/damibose/projects/magpie/bin/local_search.py", line 54, in <module>
    protocol.run()
  File "/cs/student/ug/2020/damibose/projects/magpie/magpie/bin/protocol.py", line 165, in run
    self.search.run()
  File "/cs/student/ug/2020/damibose/projects/magpie/magpie/algo/local_search.py", line 38, in run
    current_patch, current_fitness = self.explore(current_patch, current_fitness)
  File "/cs/student/ug/2020/damibose/projects/magpie/magpie/algo/local_search.py", line 130, in explore
    self.hook_evaluation(patch, run, False, best)
  File "/cs/student/ug/2020/damibose/projects/magpie/magpie/bin/algorithm.py", line 89, in hook_evaluation
    self.config['operator_selector'].update_quality(self.config['operator_selector'].prev_operator, self.report['initial_fitness'], run) # TODO: Change to use the previous fitness for other algorithms. Maybe incorporate the patch as a whole to contain this info. As in the patch contains info about the previous patch, creating a linked list of sorts. Major refactoring needed though.
  File "/cs/student/ug/2020/damibose/projects/magpie/magpie/base/operator_selector.py", line 183, in update_quality
    reward = super().update_quality(operator, initial_fitness, run)
  File "/cs/student/ug/2020/damibose/projects/magpie/magpie/base/operator_selector.py", line 50, in update_quality
    reward = calculate_reward(initial_fitness, run)
  File "/cs/student/ug/2020/damibose/projects/magpie/magpie/base/operator_selector.py", line 27, in calculate_reward
    assert False, f"run.fitness is None for {run.status} and {run.fitness}"
AssertionError: run.fitness is None for SUCCESS and None


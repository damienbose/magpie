2023-12-15 03:04:48,804	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 5
log_dir = _magpie_logs
work_dir = _magpie_work
final_out_dir = experiments/results_e_greedy_proof_of_concept/epsilon_greedy/RandomWalk/trial_5
local_original_copy = True
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 10000.0
diff_method = unified
trust_local_filesystem = True

[software]
path = examples/code/triangle-cpp_slow
target_files = 
	triangle.cpp.xml
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
init_cmd = 
init_timeout = 60
init_lengthout = -1
setup_cmd = ./setup.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 
compile_lengthout = 
test_cmd = ./build/test_triangle
test_timeout = 
test_lengthout = 
run_cmd = perf stat ./build/run_triangle
run_timeout = 1
run_lengthout = 
batch_timeout = 
batch_lengthout = 
batch_bin_fitness_strategy = aggregate
batch_fitness_strategy = sum
fitness = perf_instructions

[srcml]
rename = 
focus = block break continue decl_stmt do expr_stmt for goto if return switch while
internodes = block
process_pseudo_blocks = True
process_literals = False
process_operators = False

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = RandomWalk
possible_edits = 
	DeclStmtReplacement
	ExprStmtReplacement
	IfReplacement
	ReturnReplacement
	DeclStmtInsertion
	ExprStmtInsertion
	IfInsertion
	ReturnInsertion
	DeclStmtDeletion
	ExprStmtDeletion
	IfDeletion
	ReturnDeletion
warmup = 5
warmup_strategy = last
max_steps = 100
max_time = 60
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2
batch_instances = 
batch_shuffle = True
batch_bin_shuffle = False
batch_sample_size = 1
operator_selector = EpsilonGreedy
epsilon = 0.2

[search.ls]
delete_prob = 0
max_neighbours = 20
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5
batch_reset = True

[search.minify]
do_cleanup = True
do_rebuild = True
do_simplify = True
round_robin_limit = 3


2023-12-15 03:04:48,809	[INFO]	==== WARMUP ====
2023-12-15 03:04:51,444	[DEBUG]	EXEC>  SUCCESS 1204240
2023-12-15 03:04:51,444	[INFO]	WARM    SUCCESS               1204240                 
2023-12-15 03:04:52,434	[DEBUG]	EXEC>  SUCCESS 1204239
2023-12-15 03:04:52,434	[INFO]	WARM    SUCCESS               1204239                 
2023-12-15 03:04:53,450	[DEBUG]	EXEC>  SUCCESS 1204239
2023-12-15 03:04:53,451	[INFO]	WARM    SUCCESS               1204239                 
2023-12-15 03:04:54,431	[DEBUG]	EXEC>  SUCCESS 1204240
2023-12-15 03:04:54,431	[INFO]	WARM    SUCCESS               1204240                 
2023-12-15 03:04:55,464	[DEBUG]	EXEC>  SUCCESS 1204239
2023-12-15 03:04:55,464	[INFO]	WARM    SUCCESS               1204239                 
2023-12-15 03:04:55,465	[INFO]	INITIAL SUCCESS               1204239                 
2023-12-15 03:04:55,465	[INFO]	==== START: RandomWalk ====
2023-12-15 03:04:56,443	[DEBUG]	EXEC>  SUCCESS 1204600
2023-12-15 03:04:56,443	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:04:56,444	[INFO]	1       SUCCESS              +1204600 (100.03%) [1 edit(s)] 
2023-12-15 03:04:56,446	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -24,6 +24,10 @@
   }
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;

2023-12-15 03:04:56,616	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0))
2023-12-15 03:04:56,617	[INFO]	2       COMPILE_CODE_ERROR   +None  [2 edit(s)]       
2023-12-15 03:04:56,619	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -6,7 +6,7 @@
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -24,6 +24,10 @@
   }
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;

2023-12-15 03:04:56,755	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1))
2023-12-15 03:04:56,756	[INFO]	3       COMPILE_CODE_ERROR   +None  [3 edit(s)]       
2023-12-15 03:04:56,759	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -6,7 +6,7 @@
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -19,11 +19,15 @@
 
   if(a > c) {
     tmp = a;
-    a = c;
+    double tmp;
     c = tmp;
   }
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;

2023-12-15 03:04:56,891	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9))
2023-12-15 03:04:56,892	[INFO]	4       COMPILE_CODE_ERROR   +None  [4 edit(s)]       
2023-12-15 03:04:56,895	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -6,7 +6,7 @@
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,13 +17,13 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;

2023-12-15 03:04:57,054	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21))
2023-12-15 03:04:57,055	[INFO]	5       COMPILE_CODE_ERROR   +None  [5 edit(s)]       
2023-12-15 03:04:57,058	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -6,7 +6,7 @@
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,13 +17,13 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;

2023-12-15 03:04:57,831	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:04:57,831	[INFO]	6       TEST_CODE_ERROR      +None  [6 edit(s)]       
2023-12-15 03:04:57,835	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -7,6 +7,7 @@
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,13 +18,13 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;

2023-12-15 03:04:58,692	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14))
2023-12-15 03:04:58,693	[INFO]	7       TEST_CODE_ERROR      +None  [7 edit(s)]       
2023-12-15 03:04:58,696	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -7,6 +7,7 @@
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,13 +18,13 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;

2023-12-15 03:04:59,505	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1))
2023-12-15 03:04:59,506	[INFO]	8       TEST_CODE_ERROR      +None  [8 edit(s)]       
2023-12-15 03:04:59,510	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -7,6 +7,7 @@
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,13 +18,13 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;
@@ -37,6 +38,7 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:04:59,665	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0))
2023-12-15 03:04:59,665	[INFO]	9       COMPILE_CODE_ERROR   +None  [9 edit(s)]       
2023-12-15 03:04:59,670	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,12 +1,13 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,13 +18,13 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;
@@ -37,6 +38,7 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:04:59,821	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0))
2023-12-15 03:04:59,822	[INFO]	10      COMPILE_CODE_ERROR   +None  [10 edit(s)]      
2023-12-15 03:04:59,826	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,12 +1,14 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,13 +19,13 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
     b = c;
     c = tmp;
@@ -37,6 +39,7 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:04:59,975	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7))
2023-12-15 03:04:59,976	[INFO]	11      COMPILE_CODE_ERROR   +None  [11 edit(s)]      
2023-12-15 03:04:59,981	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,12 +1,14 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,15 +19,15 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
@@ -37,6 +39,7 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:00,109	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:00,110	[INFO]	12      COMPILE_CODE_ERROR   +None  [12 edit(s)]      
2023-12-15 03:05:00,115	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,12 +1,14 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,15 +19,15 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
@@ -33,10 +35,8 @@
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:00,260	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0))
2023-12-15 03:05:00,260	[INFO]	13      COMPILE_CODE_ERROR   +None  [13 edit(s)]      
2023-12-15 03:05:00,265	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,12 +1,14 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,15 +19,15 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
@@ -33,10 +35,8 @@
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:00,397	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10))
2023-12-15 03:05:00,398	[INFO]	14      COMPILE_CODE_ERROR   +None  [14 edit(s)]      
2023-12-15 03:05:00,403	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,12 +1,14 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
@@ -17,15 +19,15 @@
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
@@ -33,10 +35,8 @@
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:00,552	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:00,552	[INFO]	15      COMPILE_CODE_ERROR   +None  [15 edit(s)]      
2023-12-15 03:05:00,558	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,31 +1,38 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
@@ -33,10 +40,8 @@
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:00,710	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:00,711	[INFO]	16      COMPILE_CODE_ERROR   +None  [16 edit(s)]      
2023-12-15 03:05:00,717	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,31 +1,42 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
@@ -33,10 +44,8 @@
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:00,840	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:00,841	[INFO]	17      COMPILE_CODE_ERROR   +None  [17 edit(s)]      
2023-12-15 03:05:00,848	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,31 +1,47 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
@@ -33,10 +49,8 @@
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:00,977	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:00,978	[INFO]	18      COMPILE_CODE_ERROR   +None  [18 edit(s)]      
2023-12-15 03:05:00,984	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,31 +1,51 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
@@ -33,10 +53,8 @@
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:01,115	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:01,116	[INFO]	19      COMPILE_CODE_ERROR   +None  [19 edit(s)]      
2023-12-15 03:05:01,123	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,42 +1,64 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:01,246	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:01,246	[INFO]	20      COMPILE_CODE_ERROR   +None  [20 edit(s)]      
2023-12-15 03:05:01,254	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,42 +1,69 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;

2023-12-15 03:05:01,387	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:01,387	[INFO]	21      COMPILE_CODE_ERROR   +None  [21 edit(s)]      
2023-12-15 03:05:01,396	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,44 +1,75 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
   return SCALENE;

2023-12-15 03:05:01,527	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:01,528	[INFO]	22      COMPILE_CODE_ERROR   +None  [22 edit(s)]      
2023-12-15 03:05:01,537	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,44 +1,79 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
   return SCALENE;

2023-12-15 03:05:01,672	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:01,673	[INFO]	23      COMPILE_CODE_ERROR   +None  [23 edit(s)]      
2023-12-15 03:05:01,682	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,44 +1,84 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
   return SCALENE;

2023-12-15 03:05:01,823	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:01,824	[INFO]	24      COMPILE_CODE_ERROR   +None  [24 edit(s)]      
2023-12-15 03:05:01,833	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,44 +1,89 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
   return SCALENE;

2023-12-15 03:05:01,980	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:01,981	[INFO]	25      COMPILE_CODE_ERROR   +None  [25 edit(s)]      
2023-12-15 03:05:01,995	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,44 +1,93 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
   return SCALENE;

2023-12-15 03:05:02,128	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:02,129	[INFO]	26      COMPILE_CODE_ERROR   +None  [26 edit(s)]      
2023-12-15 03:05:02,139	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,44 +1,98 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
   return SCALENE;

2023-12-15 03:05:02,271	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8))
2023-12-15 03:05:02,272	[INFO]	27      COMPILE_CODE_ERROR   +None  [27 edit(s)]      
2023-12-15 03:05:02,280	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,44 +1,98 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
   return SCALENE;

2023-12-15 03:05:02,406	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:02,406	[INFO]	28      COMPILE_CODE_ERROR   +None  [28 edit(s)]      
2023-12-15 03:05:02,415	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,104 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  
+  delay();
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:02,551	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:02,552	[INFO]	29      COMPILE_CODE_ERROR   +None  [29 edit(s)]      
2023-12-15 03:05:02,561	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,109 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:02,700	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:02,701	[INFO]	30      COMPILE_CODE_ERROR   +None  [30 edit(s)]      
2023-12-15 03:05:02,710	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,114 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:02,841	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17))
2023-12-15 03:05:02,842	[INFO]	31      COMPILE_CODE_ERROR   +None  [31 edit(s)]      
2023-12-15 03:05:02,852	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,117 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:02,994	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:02,994	[INFO]	32      COMPILE_CODE_ERROR   +None  [32 edit(s)]      
2023-12-15 03:05:03,008	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,121 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:03,150	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:03,151	[INFO]	33      COMPILE_CODE_ERROR   +None  [33 edit(s)]      
2023-12-15 03:05:03,166	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,125 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:03,295	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:03,296	[INFO]	34      COMPILE_CODE_ERROR   +None  [34 edit(s)]      
2023-12-15 03:05:03,307	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,129 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:03,438	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:03,438	[INFO]	35      COMPILE_CODE_ERROR   +None  [35 edit(s)]      
2023-12-15 03:05:03,450	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,134 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:03,580	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10))
2023-12-15 03:05:03,581	[INFO]	36      COMPILE_CODE_ERROR   +None  [36 edit(s)]      
2023-12-15 03:05:03,592	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,135 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:03,728	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:03,728	[INFO]	37      COMPILE_CODE_ERROR   +None  [37 edit(s)]      
2023-12-15 03:05:03,741	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,139 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:03,873	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6))
2023-12-15 03:05:03,874	[INFO]	38      COMPILE_CODE_ERROR   +None  [38 edit(s)]      
2023-12-15 03:05:03,886	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,140 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:04,019	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:05:04,019	[INFO]	39      COMPILE_CODE_ERROR   +None  [39 edit(s)]      
2023-12-15 03:05:04,032	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,141 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:04,174	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:04,175	[INFO]	40      COMPILE_CODE_ERROR   +None  [40 edit(s)]      
2023-12-15 03:05:04,193	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,145 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:04,335	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:04,336	[INFO]	41      COMPILE_CODE_ERROR   +None  [41 edit(s)]      
2023-12-15 03:05:04,349	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,149 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:04,499	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:04,500	[INFO]	42      COMPILE_CODE_ERROR   +None  [42 edit(s)]      
2023-12-15 03:05:04,519	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,154 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:04,668	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:04,669	[INFO]	43      COMPILE_CODE_ERROR   +None  [43 edit(s)]      
2023-12-15 03:05:04,684	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,158 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:04,833	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:04,834	[INFO]	44      COMPILE_CODE_ERROR   +None  [44 edit(s)]      
2023-12-15 03:05:04,861	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,162 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:05,025	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:05,026	[INFO]	45      COMPILE_CODE_ERROR   +None  [45 edit(s)]      
2023-12-15 03:05:05,047	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,167 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:05,201	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:05,202	[INFO]	46      COMPILE_CODE_ERROR   +None  [46 edit(s)]      
2023-12-15 03:05:05,223	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,172 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:05,371	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:05,372	[INFO]	47      COMPILE_CODE_ERROR   +None  [47 edit(s)]      
2023-12-15 03:05:05,394	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,177 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:05,539	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1))
2023-12-15 03:05:05,540	[INFO]	48      COMPILE_CODE_ERROR   +None  [48 edit(s)]      
2023-12-15 03:05:05,563	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,178 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:05,718	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:05,719	[INFO]	49      COMPILE_CODE_ERROR   +None  [49 edit(s)]      
2023-12-15 03:05:05,743	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,183 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:05,889	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:05,890	[INFO]	50      COMPILE_CODE_ERROR   +None  [50 edit(s)]      
2023-12-15 03:05:05,907	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,187 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:06,053	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:06,054	[INFO]	51      COMPILE_CODE_ERROR   +None  [51 edit(s)]      
2023-12-15 03:05:06,072	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,191 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:06,230	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:06,231	[INFO]	52      COMPILE_CODE_ERROR   +None  [52 edit(s)]      
2023-12-15 03:05:06,256	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,195 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:06,417	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:05:06,418	[INFO]	53      COMPILE_CODE_ERROR   +None  [53 edit(s)]      
2023-12-15 03:05:06,444	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,196 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     a = b;
+    a = c;
     b = tmp;
   }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
 
   if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
     tmp = b;
-    b = c;
+    
     c = tmp;
   }
 
   if(a + b <= c)
     /*auto*/{
       return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
     }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:06,597	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:06,598	[INFO]	54      COMPILE_CODE_ERROR   +None  [54 edit(s)]      
2023-12-15 03:05:06,624	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,200 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
   if(a + b <= c)
     /*auto*/{
       return INVALID;
-    }/*auto*/
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
 }

2023-12-15 03:05:06,767	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:06,768	[INFO]	55      COMPILE_CODE_ERROR   +None  [55 edit(s)]      
2023-12-15 03:05:06,795	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,204 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    a = c;
+    b = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;
-    }/*auto*/
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:06,933	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:06,934	[INFO]	56      COMPILE_CODE_ERROR   +None  [56 edit(s)]      
2023-12-15 03:05:06,961	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,209 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
   if(a == b || b == c)
     /*auto*/{
       return ISOSCELES;
-    }/*auto*/
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:07,101	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:07,102	[INFO]	57      COMPILE_CODE_ERROR   +None  [57 edit(s)]      
2023-12-15 03:05:07,130	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,213 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:07,279	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:07,280	[INFO]	58      COMPILE_CODE_ERROR   +None  [58 edit(s)]      
2023-12-15 03:05:07,308	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,213 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:07,454	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:07,455	[INFO]	59      COMPILE_CODE_ERROR   +None  [59 edit(s)]      
2023-12-15 03:05:07,484	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,218 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:07,640	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:07,641	[INFO]	60      COMPILE_CODE_ERROR   +None  [60 edit(s)]      
2023-12-15 03:05:07,671	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,222 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:07,830	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:07,831	[INFO]	61      COMPILE_CODE_ERROR   +None  [61 edit(s)]      
2023-12-15 03:05:07,861	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,227 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:08,021	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:08,022	[INFO]	62      COMPILE_CODE_ERROR   +None  [62 edit(s)]      
2023-12-15 03:05:08,044	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,231 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:08,186	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:08,187	[INFO]	63      COMPILE_CODE_ERROR   +None  [63 edit(s)]      
2023-12-15 03:05:08,210	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,236 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:08,359	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:08,360	[INFO]	64      COMPILE_CODE_ERROR   +None  [64 edit(s)]      
2023-12-15 03:05:08,391	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,240 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:08,557	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6))
2023-12-15 03:05:08,558	[INFO]	65      COMPILE_CODE_ERROR   +None  [65 edit(s)]      
2023-12-15 03:05:08,589	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,240 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
-}
-
-int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+    }/*auto*/ /*ignores possible errors*/
+}
+
+int classify_triangle(double a, double b, double c) {
+  double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+
+  delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+
+  // Sort the sides so that a <= b <= c
+  if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:08,758	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:08,759	[INFO]	66      COMPILE_CODE_ERROR   +None  [66 edit(s)]      
2023-12-15 03:05:08,793	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,245 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:08,964	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:08,965	[INFO]	67      COMPILE_CODE_ERROR   +None  [67 edit(s)]      
2023-12-15 03:05:08,999	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,249 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:09,162	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:09,163	[INFO]	68      COMPILE_CODE_ERROR   +None  [68 edit(s)]      
2023-12-15 03:05:09,198	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,254 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:09,356	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12))
2023-12-15 03:05:09,357	[INFO]	69      COMPILE_CODE_ERROR   +None  [69 edit(s)]      
2023-12-15 03:05:09,393	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,254 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:09,546	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:09,547	[INFO]	70      COMPILE_CODE_ERROR   +None  [70 edit(s)]      
2023-12-15 03:05:09,583	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,258 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:09,732	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:09,733	[INFO]	71      COMPILE_CODE_ERROR   +None  [71 edit(s)]      
2023-12-15 03:05:09,768	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,262 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:09,927	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:09,928	[INFO]	72      COMPILE_CODE_ERROR   +None  [72 edit(s)]      
2023-12-15 03:05:09,965	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,267 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:10,115	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:10,116	[INFO]	73      COMPILE_CODE_ERROR   +None  [73 edit(s)]      
2023-12-15 03:05:10,152	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,271 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:10,307	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:10,309	[INFO]	74      COMPILE_CODE_ERROR   +None  [74 edit(s)]      
2023-12-15 03:05:10,345	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,275 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:10,500	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:10,501	[INFO]	75      COMPILE_CODE_ERROR   +None  [75 edit(s)]      
2023-12-15 03:05:10,541	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,279 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
     }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:10,705	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:10,706	[INFO]	76      COMPILE_CODE_ERROR   +None  [76 edit(s)]      
2023-12-15 03:05:10,746	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,283 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
     }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:10,912	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:10,913	[INFO]	77      COMPILE_CODE_ERROR   +None  [77 edit(s)]      
2023-12-15 03:05:10,955	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,287 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
     }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:11,127	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:11,128	[INFO]	78      COMPILE_CODE_ERROR   +None  [78 edit(s)]      
2023-12-15 03:05:11,169	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,287 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
     }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:11,332	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2))
2023-12-15 03:05:11,333	[INFO]	79      COMPILE_CODE_ERROR   +None  [79 edit(s)]      
2023-12-15 03:05:11,372	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,287 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
     }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:11,527	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:11,528	[INFO]	80      COMPILE_CODE_ERROR   +None  [80 edit(s)]      
2023-12-15 03:05:11,567	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,291 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   if(b > c) {
     tmp = b;
     b = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
     }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:11,728	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:11,729	[INFO]	81      COMPILE_CODE_ERROR   +None  [81 edit(s)]      
2023-12-15 03:05:11,760	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,296 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
     }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:11,909	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:11,910	[INFO]	82      COMPILE_CODE_ERROR   +None  [82 edit(s)]      
2023-12-15 03:05:11,941	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,301 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    c = tmp;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:12,112	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20))
2023-12-15 03:05:12,113	[INFO]	83      COMPILE_CODE_ERROR   +None  [83 edit(s)]      
2023-12-15 03:05:12,156	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,301 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:12,328	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:12,329	[INFO]	84      COMPILE_CODE_ERROR   +None  [84 edit(s)]      
2023-12-15 03:05:12,370	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,305 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:12,534	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:12,535	[INFO]	85      COMPILE_CODE_ERROR   +None  [85 edit(s)]      
2023-12-15 03:05:12,578	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,309 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:12,740	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:12,741	[INFO]	86      COMPILE_CODE_ERROR   +None  [86 edit(s)]      
2023-12-15 03:05:12,784	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,314 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:12,940	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:12,941	[INFO]	87      COMPILE_CODE_ERROR   +None  [87 edit(s)]      
2023-12-15 03:05:12,982	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,318 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  } //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:13,144	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:05:13,145	[INFO]	88      COMPILE_CODE_ERROR   +None  [88 edit(s)]      
2023-12-15 03:05:13,183	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,322 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:13,342	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:05:13,343	[INFO]	89      COMPILE_CODE_ERROR   +None  [89 edit(s)]      
2023-12-15 03:05:13,378	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,327 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:13,542	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:13,543	[INFO]	90      COMPILE_CODE_ERROR   +None  [90 edit(s)]      
2023-12-15 03:05:13,579	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,331 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:13,749	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:13,750	[INFO]	91      COMPILE_CODE_ERROR   +None  [91 edit(s)]      
2023-12-15 03:05:13,787	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,336 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      c = tmp;
+    }/*auto*/
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:13,956	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5))
2023-12-15 03:05:13,957	[INFO]	92      COMPILE_CODE_ERROR   +None  [92 edit(s)]      
2023-12-15 03:05:14,006	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,324 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:14,182	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:14,183	[INFO]	93      COMPILE_CODE_ERROR   +None  [93 edit(s)]      
2023-12-15 03:05:14,230	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,328 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:14,403	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 4)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22))
2023-12-15 03:05:14,404	[INFO]	94      COMPILE_CODE_ERROR   +None  [94 edit(s)]      
2023-12-15 03:05:14,449	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,328 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:14,612	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 4)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'expr_stmt', 6))
2023-12-15 03:05:14,613	[INFO]	95      COMPILE_CODE_ERROR   +None  [95 edit(s)]      
2023-12-15 03:05:14,651	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,329 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = c;
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:14,814	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 4)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:05:14,815	[INFO]	96      COMPILE_CODE_ERROR   +None  [96 edit(s)]      
2023-12-15 03:05:14,854	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,334 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = c;
+  }
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:15,030	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 4)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0))
2023-12-15 03:05:15,031	[INFO]	97      COMPILE_CODE_ERROR   +None  [97 edit(s)]      
2023-12-15 03:05:15,083	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,335 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = c;
+  }
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 }

2023-12-15 03:05:15,272	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 4)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:15,273	[INFO]	98      COMPILE_CODE_ERROR   +None  [98 edit(s)]      
2023-12-15 03:05:15,322	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,339 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = c;
+  }
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
 }

2023-12-15 03:05:15,492	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 4)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:05:15,493	[INFO]	99      COMPILE_CODE_ERROR   +None  [99 edit(s)]      
2023-12-15 03:05:15,540	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,344 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = c;
+  }
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
 }

2023-12-15 03:05:15,714	[DEBUG]	IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 6), ('triangle.cpp.xml', 'stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 9)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 21)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 10), ('triangle.cpp.xml', 'stmt', 14)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'return', 0)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | IfDeletion(('triangle.cpp.xml', 'if', 4)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 8)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 17)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'expr_stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 5)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'expr_stmt', 6)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 28), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 31), ('triangle.cpp.xml', 'if', 2)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'return', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 25), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 3), ('triangle.cpp.xml', 'if', 4)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 21), ('triangle.cpp.xml', 'if', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 8), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 29), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 20), ('triangle.cpp.xml', 'if', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 22), ('triangle.cpp.xml', 'if', 1)) | IfDeletion(('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 16), ('triangle.cpp.xml', 'if', 4)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 17), ('triangle.cpp.xml', 'expr_stmt', 6)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 4)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:05:15,716	[INFO]	100     COMPILE_CODE_ERROR   +None  [100 edit(s)]     
2023-12-15 03:05:15,769	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,348 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
-  nanosleep(&ms,NULL); /*ignores possible errors*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  return EQUILATERAL;
+  
+  return INVALID;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/ /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
   double tmp;
+  if(a > b) {
+    
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    b = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = c;
+  }
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  a = c;
+  if(a + b <= c)
+    /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      return INVALID;
+      if(a > c) {
+        tmp = a;
+        a = c;
+        c = tmp;
+      }
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    return EQUILATERAL;
+    b = c;
+    c = tmp;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+  }
 
   delay();
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(a > b) {
+        tmp = a;
+        a = b;
+        b = tmp;
+      }
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+      if(a == b && b == c)
+        /*auto*/{
+          return EQUILATERAL;
+        }/*auto*/
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    tmp = a;
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    a = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    a = c;
+    b = tmp;
+  }
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+      double tmp;
+    }/*auto*/
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  c = tmp;
+  if(a == b || b == c)
+    /*auto*/{
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
+      return ISOSCELES;
+      if(b > c) {
+        tmp = b;
+        b = c;
+        c = tmp;
+      }
+    }/*auto*/
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  if(b > c) {
+    if(b > c) {
+      tmp = b;
+      b = c;
+      c = tmp;
+    }
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    if(a == b && b == c)
+      /*auto*/{
+        return EQUILATERAL;
+      }/*auto*/
+    tmp = b;
+    
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  
+  delay();
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  double tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+      if(a + b <= c)
+        /*auto*/{
+          return INVALID;
+        }/*auto*/
       return ISOSCELES;
     }/*auto*/
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   return SCALENE;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
 }

2023-12-15 03:05:15,770	[INFO]	==== END ====
2023-12-15 03:05:15,771	[INFO]	
2023-12-15 03:05:15,771	[INFO]	==== REPORT ====
2023-12-15 03:05:15,771	[INFO]	Termination: step budget
2023-12-15 03:05:15,772	[INFO]	Log file: /cs/student/ug/2020/damibose/projects/magpie/_magpie_logs/triangle-cpp_slow_1702609488.log

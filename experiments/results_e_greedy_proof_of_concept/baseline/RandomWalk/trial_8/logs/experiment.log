2023-12-15 03:27:05,059	[DEBUG]	==== CONFIG ====
[magpie]
import = 
seed = 8
log_dir = _magpie_logs
work_dir = _magpie_work
final_out_dir = experiments/results_e_greedy_proof_of_concept/baseline/RandomWalk/trial_8
local_original_copy = True
local_original_name = __original__
output_encoding = ascii
edit_retries = 10
default_timeout = 30
default_lengthout = 10000.0
diff_method = unified
trust_local_filesystem = True

[software]
path = examples/code/triangle-cpp_slow
target_files = 
	triangle.cpp.xml
program = BasicProgram
engine_rules = 
	*.params : ConfigFileParamsEngine
	*.xml : SrcmlEngine
	* : LineEngine
engine_config = 
	*.params : [params]
	*.xml : [srcml]
init_cmd = 
init_timeout = 60
init_lengthout = -1
setup_cmd = ./setup.sh
setup_timeout = 
setup_lengthout = 
compile_cmd = ./compile.sh
compile_timeout = 
compile_lengthout = 
test_cmd = ./build/test_triangle
test_timeout = 
test_lengthout = 
run_cmd = perf stat ./build/run_triangle
run_timeout = 1
run_lengthout = 
batch_timeout = 
batch_lengthout = 
batch_bin_fitness_strategy = aggregate
batch_fitness_strategy = sum
fitness = perf_instructions

[srcml]
rename = 
focus = block break continue decl_stmt do expr_stmt for goto if return switch while
internodes = block
process_pseudo_blocks = True
process_literals = False
process_operators = False

[params]
timing = test run
cli_prefix = --
cli_glue = =
cli_boolean = show
cli_boolean_prefix_true = 
cli_boolean_prefix_false = no-
silent_prefix = @
silent_suffix = $

[search]
protocol = BasicProtocol
algorithm = RandomWalk
possible_edits = 
	DeclStmtReplacement
	ExprStmtReplacement
	IfReplacement
	ReturnReplacement
	DeclStmtInsertion
	ExprStmtInsertion
	IfInsertion
	ReturnInsertion
	DeclStmtDeletion
	ExprStmtDeletion
	IfDeletion
	ReturnDeletion
warmup = 5
warmup_strategy = last
max_steps = 100
max_time = 60
target_fitness = 
cache_maxsize = 40
cache_keep = 0.2
batch_instances = 
batch_shuffle = True
batch_bin_shuffle = False
batch_sample_size = 1
operator_selector = UniformSelector

[search.ls]
delete_prob = 0
max_neighbours = 20
when_trapped = continue
accept_fail = False
tabu_length = 10

[search.gp]
pop_size = 10
delete_prob = 0.5
offspring_elitism = 0.1
offspring_crossover = 0.5
offspring_mutation = 0.4
uniform_rate = 0.5
batch_reset = True

[search.minify]
do_cleanup = True
do_rebuild = True
do_simplify = True
round_robin_limit = 3


2023-12-15 03:27:05,064	[INFO]	==== WARMUP ====
2023-12-15 03:27:07,643	[DEBUG]	EXEC>  SUCCESS 1204240
2023-12-15 03:27:07,643	[INFO]	WARM    SUCCESS               1204240                 
2023-12-15 03:27:08,720	[DEBUG]	EXEC>  SUCCESS 1204239
2023-12-15 03:27:08,720	[INFO]	WARM    SUCCESS               1204239                 
2023-12-15 03:27:09,686	[DEBUG]	EXEC>  SUCCESS 1204240
2023-12-15 03:27:09,687	[INFO]	WARM    SUCCESS               1204240                 
2023-12-15 03:27:10,736	[DEBUG]	EXEC>  SUCCESS 1204239
2023-12-15 03:27:10,737	[INFO]	WARM    SUCCESS               1204239                 
2023-12-15 03:27:11,725	[DEBUG]	EXEC>  SUCCESS 1204240
2023-12-15 03:27:11,726	[INFO]	WARM    SUCCESS               1204240                 
2023-12-15 03:27:11,727	[INFO]	INITIAL SUCCESS               1204240                 
2023-12-15 03:27:11,727	[INFO]	==== START: RandomWalk ====
2023-12-15 03:27:12,534	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2))
2023-12-15 03:27:12,534	[INFO]	1       TEST_CODE_ERROR      +None  [1 edit(s)]       
2023-12-15 03:27:12,535	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -39,7 +39,7 @@
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
-      return ISOSCELES;
+      
     }/*auto*/
   return SCALENE;
 }

2023-12-15 03:27:12,689	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:27:12,690	[INFO]	2       COMPILE_CODE_ERROR   +None  [2 edit(s)]       
2023-12-15 03:27:12,691	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -6,7 +6,7 @@
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
   delay();
 
@@ -39,7 +39,7 @@
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
-      return ISOSCELES;
+      
     }/*auto*/
   return SCALENE;
 }

2023-12-15 03:27:12,827	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21))
2023-12-15 03:27:12,828	[INFO]	3       COMPILE_CODE_ERROR   +None  [3 edit(s)]       
2023-12-15 03:27:12,829	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,12 +1,12 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  return ISOSCELES; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
   delay();
 
@@ -39,7 +39,7 @@
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
-      return ISOSCELES;
+      
     }/*auto*/
   return SCALENE;
 }

2023-12-15 03:27:12,958	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7))
2023-12-15 03:27:12,958	[INFO]	4       COMPILE_CODE_ERROR   +None  [4 edit(s)]       
2023-12-15 03:27:12,961	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,12 +1,12 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  return ISOSCELES; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
   delay();
 
@@ -39,7 +39,7 @@
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
-      return ISOSCELES;
+      
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:13,085	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:27:13,086	[INFO]	5       COMPILE_CODE_ERROR   +None  [5 edit(s)]       
2023-12-15 03:27:13,089	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,17 +1,22 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  return ISOSCELES; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
     b = tmp;
@@ -39,7 +44,7 @@
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
-      return ISOSCELES;
+      
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:13,210	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0))
2023-12-15 03:27:13,211	[INFO]	6       COMPILE_CODE_ERROR   +None  [6 edit(s)]       
2023-12-15 03:27:13,214	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,17 +1,22 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
     b = tmp;
@@ -39,7 +44,7 @@
     }/*auto*/
   if(a == b || b == c)
     /*auto*/{
-      return ISOSCELES;
+      
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:13,346	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16))
2023-12-15 03:27:13,347	[INFO]	7       COMPILE_CODE_ERROR   +None  [7 edit(s)]       
2023-12-15 03:27:13,350	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,17 +1,22 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
     b = tmp;
@@ -37,9 +42,9 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:13,479	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7))
2023-12-15 03:27:13,479	[INFO]	8       COMPILE_CODE_ERROR   +None  [8 edit(s)]       
2023-12-15 03:27:13,483	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,17 +1,22 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
     b = tmp;
@@ -20,7 +25,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -37,9 +42,9 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:13,609	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6))
2023-12-15 03:27:13,610	[INFO]	9       COMPILE_CODE_ERROR   +None  [9 edit(s)]       
2023-12-15 03:27:13,614	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,17 +1,22 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
   delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
     b = tmp;
@@ -20,7 +25,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -37,9 +42,9 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:13,733	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1))
2023-12-15 03:27:13,733	[INFO]	10      COMPILE_CODE_ERROR   +None  [10 edit(s)]      
2023-12-15 03:27:13,737	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,17 +1,22 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
     tmp = a;
     a = b;
     b = tmp;
@@ -20,7 +25,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -37,9 +42,9 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:13,860	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2))
2023-12-15 03:27:13,861	[INFO]	11      COMPILE_CODE_ERROR   +None  [11 edit(s)]      
2023-12-15 03:27:13,865	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,18 +1,23 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
@@ -20,7 +25,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -37,9 +42,9 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:13,989	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3))
2023-12-15 03:27:13,989	[INFO]	12      COMPILE_CODE_ERROR   +None  [12 edit(s)]      
2023-12-15 03:27:13,993	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,18 +1,23 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
@@ -20,7 +25,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -29,17 +34,14 @@
     c = tmp;
   }
 
+  
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   if(a + b <= c)
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:14,121	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3))
2023-12-15 03:27:14,122	[INFO]	13      COMPILE_CODE_ERROR   +None  [13 edit(s)]      
2023-12-15 03:27:14,126	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,18 +1,23 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
@@ -20,7 +25,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -29,17 +34,14 @@
     c = tmp;
   }
 
+  
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   if(a + b <= c)
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:14,258	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6))
2023-12-15 03:27:14,258	[INFO]	14      COMPILE_CODE_ERROR   +None  [14 edit(s)]      
2023-12-15 03:27:14,263	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,18 +1,24 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  a = c;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
@@ -20,7 +26,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -29,17 +35,14 @@
     c = tmp;
   }
 
+  
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   if(a + b <= c)
     /*auto*/{
       return INVALID;
     }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:14,405	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3))
2023-12-15 03:27:14,406	[INFO]	15      COMPILE_CODE_ERROR   +None  [15 edit(s)]      
2023-12-15 03:27:14,411	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,18 +1,24 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  a = c;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
@@ -20,7 +26,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -29,17 +35,15 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return SCALENE;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:14,550	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21))
2023-12-15 03:27:14,550	[INFO]	16      COMPILE_CODE_ERROR   +None  [16 edit(s)]      
2023-12-15 03:27:14,556	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,18 +1,24 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  a = c;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
@@ -20,7 +26,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -29,17 +35,15 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return SCALENE;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:14,689	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7))
2023-12-15 03:27:14,689	[INFO]	17      COMPILE_CODE_ERROR   +None  [17 edit(s)]      
2023-12-15 03:27:14,695	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,18 +1,24 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  a = c;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
@@ -20,7 +26,7 @@
   if(a > c) {
     tmp = a;
     a = c;
-    c = tmp;
+    
   }
 
   if(b > c) {
@@ -29,17 +35,16 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return SCALENE;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:14,837	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7))
2023-12-15 03:27:14,838	[INFO]	18      COMPILE_CODE_ERROR   +None  [18 edit(s)]      
2023-12-15 03:27:14,844	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,29 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
+  a = c;
+  
 
-  delay();
+  
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +31,16 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return SCALENE;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:14,988	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:27:14,989	[INFO]	19      COMPILE_CODE_ERROR   +None  [19 edit(s)]      
2023-12-15 03:27:14,996	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,30 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  a = c;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +32,16 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
+  if(a + b <= c)
     /*auto*/{
-      return ISOSCELES;
+      return SCALENE;
+      return INVALID;
     }/*auto*/
-  return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:15,144	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22))
2023-12-15 03:27:15,145	[INFO]	20      COMPILE_CODE_ERROR   +None  [20 edit(s)]      
2023-12-15 03:27:15,152	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,30 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  b = tmp; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  a = c;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +32,12 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:15,281	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0))
2023-12-15 03:27:15,282	[INFO]	21      COMPILE_CODE_ERROR   +None  [21 edit(s)]      
2023-12-15 03:27:15,287	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,30 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  a = c;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +32,12 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:15,417	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3))
2023-12-15 03:27:15,417	[INFO]	22      COMPILE_CODE_ERROR   +None  [22 edit(s)]      
2023-12-15 03:27:15,423	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,30 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  a = c;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +32,12 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:15,554	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2))
2023-12-15 03:27:15,555	[INFO]	23      COMPILE_CODE_ERROR   +None  [23 edit(s)]      
2023-12-15 03:27:15,561	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,31 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  a = c;
+  return ISOSCELES;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +33,12 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:15,700	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12))
2023-12-15 03:27:15,700	[INFO]	24      COMPILE_CODE_ERROR   +None  [24 edit(s)]      
2023-12-15 03:27:15,709	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,31 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +33,12 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:15,855	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:27:15,856	[INFO]	25      COMPILE_CODE_ERROR   +None  [25 edit(s)]      
2023-12-15 03:27:15,864	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,35 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +37,12 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:16,018	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2))
2023-12-15 03:27:16,019	[INFO]	26      COMPILE_CODE_ERROR   +None  [26 edit(s)]      
2023-12-15 03:27:16,028	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,27 +1,35 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
@@ -29,17 +37,12 @@
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:16,176	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:27:16,177	[INFO]	27      COMPILE_CODE_ERROR   +None  [27 edit(s)]      
2023-12-15 03:27:16,186	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,52 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
-
-  delay();
 
   // Sort the sides so that a <= b <= c
   if(a > b) {
-    tmp = a;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    
+    if(a + b <= c)
+      /*auto*/{
+        return INVALID;
+      }/*auto*/
     a = b;
     b = tmp;
   }
 
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:16,333	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0))
2023-12-15 03:27:16,334	[INFO]	28      COMPILE_CODE_ERROR   +None  [28 edit(s)]      
2023-12-15 03:27:16,342	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,39 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  
+  c = tmp;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:16,504	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10))
2023-12-15 03:27:16,505	[INFO]	29      COMPILE_CODE_ERROR   +None  [29 edit(s)]      
2023-12-15 03:27:16,514	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,36 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:16,657	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3))
2023-12-15 03:27:16,658	[INFO]	30      COMPILE_CODE_ERROR   +None  [30 edit(s)]      
2023-12-15 03:27:16,665	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,37 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:16,798	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10))
2023-12-15 03:27:16,799	[INFO]	31      COMPILE_CODE_ERROR   +None  [31 edit(s)]      
2023-12-15 03:27:16,807	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,37 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:16,960	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3))
2023-12-15 03:27:16,961	[INFO]	32      COMPILE_CODE_ERROR   +None  [32 edit(s)]      
2023-12-15 03:27:16,972	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,41 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  
+
+  
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:17,122	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3))
2023-12-15 03:27:17,123	[INFO]	33      COMPILE_CODE_ERROR   +None  [33 edit(s)]      
2023-12-15 03:27:17,134	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,41 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  
+
+  
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:17,285	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17))
2023-12-15 03:27:17,286	[INFO]	34      COMPILE_CODE_ERROR   +None  [34 edit(s)]      
2023-12-15 03:27:17,297	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,44 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:17,454	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22))
2023-12-15 03:27:17,455	[INFO]	35      COMPILE_CODE_ERROR   +None  [35 edit(s)]      
2023-12-15 03:27:17,466	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,44 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:17,614	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10))
2023-12-15 03:27:17,615	[INFO]	36      COMPILE_CODE_ERROR   +None  [36 edit(s)]      
2023-12-15 03:27:17,627	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,45 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:17,768	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0))
2023-12-15 03:27:17,769	[INFO]	37      COMPILE_CODE_ERROR   +None  [37 edit(s)]      
2023-12-15 03:27:17,781	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,45 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:17,915	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2))
2023-12-15 03:27:17,916	[INFO]	38      COMPILE_CODE_ERROR   +None  [38 edit(s)]      
2023-12-15 03:27:17,929	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,45 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
+  tmp = a;
 
   if(b > c) {
+    return SCALENE;
     tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
     b = c;
     c = tmp;
   }
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:18,069	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:27:18,070	[INFO]	39      COMPILE_CODE_ERROR   +None  [39 edit(s)]      
2023-12-15 03:27:18,083	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,50 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  tmp = a;
+
+  if(b > c) {
+    return SCALENE;
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  
+  c = tmp;
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:18,221	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:27:18,222	[INFO]	40      COMPILE_CODE_ERROR   +None  [40 edit(s)]      
2023-12-15 03:27:18,236	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,55 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  tmp = a;
+
+  if(b > c) {
+    return SCALENE;
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:18,390	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5))
2023-12-15 03:27:18,391	[INFO]	41      COMPILE_CODE_ERROR   +None  [41 edit(s)]      
2023-12-15 03:27:18,404	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,56 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+  tmp = a; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
 
-  delay();
+  // Sort the sides so that a <= b <= c
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
 
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  tmp = a;
+
+  if(b > c) {
+    return SCALENE;
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:18,553	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3))
2023-12-15 03:27:18,553	[INFO]	42      COMPILE_CODE_ERROR   +None  [42 edit(s)]      
2023-12-15 03:27:18,568	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,57 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+  tmp = a; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    return SCALENE;
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = a;
 }

2023-12-15 03:27:18,715	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8))
2023-12-15 03:27:18,716	[INFO]	43      COMPILE_CODE_ERROR   +None  [43 edit(s)]      
2023-12-15 03:27:18,731	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,58 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+  tmp = a; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    return SCALENE;
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:18,888	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22))
2023-12-15 03:27:18,889	[INFO]	44      COMPILE_CODE_ERROR   +None  [44 edit(s)]      
2023-12-15 03:27:18,904	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,58 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+  tmp = a; //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    return SCALENE;
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:19,048	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0))
2023-12-15 03:27:19,049	[INFO]	45      COMPILE_CODE_ERROR   +None  [45 edit(s)]      
2023-12-15 03:27:19,064	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,58 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    return SCALENE;
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:19,197	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0))
2023-12-15 03:27:19,198	[INFO]	46      COMPILE_CODE_ERROR   +None  [46 edit(s)]      
2023-12-15 03:27:19,213	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,58 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:19,351	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1))
2023-12-15 03:27:19,352	[INFO]	47      COMPILE_CODE_ERROR   +None  [47 edit(s)]      
2023-12-15 03:27:19,367	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,58 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:19,508	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0))
2023-12-15 03:27:19,509	[INFO]	48      COMPILE_CODE_ERROR   +None  [48 edit(s)]      
2023-12-15 03:27:19,523	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,58 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:19,653	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17))
2023-12-15 03:27:19,653	[INFO]	49      COMPILE_CODE_ERROR   +None  [49 edit(s)]      
2023-12-15 03:27:19,665	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,61 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  nanosleep(&ms,NULL);
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:19,795	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16))
2023-12-15 03:27:19,796	[INFO]	50      COMPILE_CODE_ERROR   +None  [50 edit(s)]      
2023-12-15 03:27:19,808	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,64 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:19,955	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0))
2023-12-15 03:27:19,955	[INFO]	51      COMPILE_CODE_ERROR   +None  [51 edit(s)]      
2023-12-15 03:27:19,967	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,64 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:20,110	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0))
2023-12-15 03:27:20,110	[INFO]	52      COMPILE_CODE_ERROR   +None  [52 edit(s)]      
2023-12-15 03:27:20,122	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,65 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:20,262	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2))
2023-12-15 03:27:20,262	[INFO]	53      COMPILE_CODE_ERROR   +None  [53 edit(s)]      
2023-12-15 03:27:20,274	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,62 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:20,411	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9))
2023-12-15 03:27:20,412	[INFO]	54      COMPILE_CODE_ERROR   +None  [54 edit(s)]      
2023-12-15 03:27:20,424	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,62 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:20,569	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8))
2023-12-15 03:27:20,570	[INFO]	55      COMPILE_CODE_ERROR   +None  [55 edit(s)]      
2023-12-15 03:27:20,582	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,63 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:20,722	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3))
2023-12-15 03:27:20,723	[INFO]	56      COMPILE_CODE_ERROR   +None  [56 edit(s)]      
2023-12-15 03:27:20,736	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,63 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+  tmp = b;
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
 }

2023-12-15 03:27:20,877	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:27:20,878	[INFO]	57      COMPILE_CODE_ERROR   +None  [57 edit(s)]      
2023-12-15 03:27:20,891	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,68 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:21,027	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4))
2023-12-15 03:27:21,028	[INFO]	58      COMPILE_CODE_ERROR   +None  [58 edit(s)]      
2023-12-15 03:27:21,041	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,30 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +33,40 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:21,180	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2))
2023-12-15 03:27:21,181	[INFO]	59      COMPILE_CODE_ERROR   +None  [59 edit(s)]      
2023-12-15 03:27:21,194	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,30 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +33,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:21,328	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8))
2023-12-15 03:27:21,329	[INFO]	60      COMPILE_CODE_ERROR   +None  [60 edit(s)]      
2023-12-15 03:27:21,342	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,30 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +33,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:21,478	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12))
2023-12-15 03:27:21,479	[INFO]	61      COMPILE_CODE_ERROR   +None  [61 edit(s)]      
2023-12-15 03:27:21,493	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,30 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +33,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:21,627	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22))
2023-12-15 03:27:21,628	[INFO]	62      COMPILE_CODE_ERROR   +None  [62 edit(s)]      
2023-12-15 03:27:21,642	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,27 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +30,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:21,785	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6))
2023-12-15 03:27:21,786	[INFO]	63      COMPILE_CODE_ERROR   +None  [63 edit(s)]      
2023-12-15 03:27:21,800	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,27 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +30,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:21,945	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7))
2023-12-15 03:27:21,946	[INFO]	64      COMPILE_CODE_ERROR   +None  [64 edit(s)]      
2023-12-15 03:27:21,960	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,27 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = b;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +30,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:22,103	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4))
2023-12-15 03:27:22,103	[INFO]	65      COMPILE_CODE_ERROR   +None  [65 edit(s)]      
2023-12-15 03:27:22,122	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,27 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = a;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +30,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:22,291	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1))
2023-12-15 03:27:22,292	[INFO]	66      COMPILE_CODE_ERROR   +None  [66 edit(s)]      
2023-12-15 03:27:22,311	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,28 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = a;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +31,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:22,465	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0))
2023-12-15 03:27:22,466	[INFO]	67      COMPILE_CODE_ERROR   +None  [67 edit(s)]      
2023-12-15 03:27:22,483	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,28 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = a;
+   //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +31,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:22,628	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16))
2023-12-15 03:27:22,629	[INFO]	68      COMPILE_CODE_ERROR   +None  [68 edit(s)]      
2023-12-15 03:27:22,650	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,31 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +34,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:22,794	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8))
2023-12-15 03:27:22,795	[INFO]	69      COMPILE_CODE_ERROR   +None  [69 edit(s)]      
2023-12-15 03:27:22,817	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,31 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +34,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:22,964	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10))
2023-12-15 03:27:22,965	[INFO]	70      COMPILE_CODE_ERROR   +None  [70 edit(s)]      
2023-12-15 03:27:22,987	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,31 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +34,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:23,139	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:27:23,140	[INFO]	71      COMPILE_CODE_ERROR   +None  [71 edit(s)]      
2023-12-15 03:27:23,162	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,34 +1,32 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
-  if(a > c) {
-    tmp = a;
-    a = c;
-    c = tmp;
-  }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
+  
   if(a + b <= c)
     /*auto*/{
       return INVALID;
@@ -37,9 +35,41 @@
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:23,327	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8))
2023-12-15 03:27:23,328	[INFO]	72      COMPILE_CODE_ERROR   +None  [72 edit(s)]      
2023-12-15 03:27:23,350	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,72 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  tmp = a;
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:23,514	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1))
2023-12-15 03:27:23,515	[INFO]	73      COMPILE_CODE_ERROR   +None  [73 edit(s)]      
2023-12-15 03:27:23,537	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,72 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:23,693	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0))
2023-12-15 03:27:23,694	[INFO]	74      COMPILE_CODE_ERROR   +None  [74 edit(s)]      
2023-12-15 03:27:23,717	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,72 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:23,872	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:27:23,874	[INFO]	75      COMPILE_CODE_ERROR   +None  [75 edit(s)]      
2023-12-15 03:27:23,896	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,76 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:24,042	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:27:24,043	[INFO]	76      COMPILE_CODE_ERROR   +None  [76 edit(s)]      
2023-12-15 03:27:24,066	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,81 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
+  double tmp;
+  return SCALENE;
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  // Sort the sides so that a <= b <= c
+  
+  a = c;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:24,213	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:27:24,214	[INFO]	77      COMPILE_CODE_ERROR   +None  [77 edit(s)]      
2023-12-15 03:27:24,238	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,81 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
+  double tmp;
+  return SCALENE;
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  // Sort the sides so that a <= b <= c
+  
+  a = c;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:24,381	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3))
2023-12-15 03:27:24,382	[INFO]	78      COMPILE_CODE_ERROR   +None  [78 edit(s)]      
2023-12-15 03:27:24,406	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,82 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
-  double tmp;
-
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
-  }
-
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
+  double tmp;
+  return SCALENE;
 
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
+  // Sort the sides so that a <= b <= c
+  
+  a = c;
   if(a == b && b == c)
     /*auto*/{
       return EQUILATERAL;
     }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
+
+  
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
   return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
 }

2023-12-15 03:27:24,556	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3))
2023-12-15 03:27:24,557	[INFO]	79      COMPILE_CODE_ERROR   +None  [79 edit(s)]      
2023-12-15 03:27:24,581	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,78 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:24,724	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18))
2023-12-15 03:27:24,725	[INFO]	80      COMPILE_CODE_ERROR   +None  [80 edit(s)]      
2023-12-15 03:27:24,749	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,78 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:24,892	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:27:24,893	[INFO]	81      COMPILE_CODE_ERROR   +None  [81 edit(s)]      
2023-12-15 03:27:24,918	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,79 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
+  double tmp;
+  return SCALENE;
+
+  // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
   double tmp;
 
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:25,065	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2))
2023-12-15 03:27:25,067	[INFO]	82      COMPILE_CODE_ERROR   +None  [82 edit(s)]      
2023-12-15 03:27:25,091	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,84 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
+  double tmp;
+  return SCALENE;
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+
+  // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
   double tmp;
 
-  delay();
-
-  // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:25,234	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0))
2023-12-15 03:27:25,235	[INFO]	83      COMPILE_CODE_ERROR   +None  [83 edit(s)]      
2023-12-15 03:27:25,261	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,85 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:25,403	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:27:25,404	[INFO]	84      COMPILE_CODE_ERROR   +None  [84 edit(s)]      
2023-12-15 03:27:25,429	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,85 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:25,576	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5))
2023-12-15 03:27:25,577	[INFO]	85      COMPILE_CODE_ERROR   +None  [85 edit(s)]      
2023-12-15 03:27:25,595	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,86 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  tmp = a;
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:25,740	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0))
2023-12-15 03:27:25,741	[INFO]	86      COMPILE_CODE_ERROR   +None  [86 edit(s)]      
2023-12-15 03:27:25,762	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,86 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:25,900	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1))
2023-12-15 03:27:25,901	[INFO]	87      COMPILE_CODE_ERROR   +None  [87 edit(s)]      
2023-12-15 03:27:25,920	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,91 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
-  if(a > b) {
-    tmp = a;
-    a = b;
-    b = tmp;
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
   }
-
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
 
-  if(b > c) {
-    tmp = b;
-    b = c;
+  
+  c = tmp;
+  if(a > b) {
+    tmp = a;
+    a = b;
+    b = tmp;
+  }
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
+  if(a > c) {
+    tmp = a;
+    a = c;
     c = tmp;
   }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:26,067	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3))
2023-12-15 03:27:26,068	[INFO]	88      COMPILE_CODE_ERROR   +None  [88 edit(s)]      
2023-12-15 03:27:26,095	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,92 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  return SCALENE;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:26,249	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12))
2023-12-15 03:27:26,250	[INFO]	89      COMPILE_CODE_ERROR   +None  [89 edit(s)]      
2023-12-15 03:27:26,270	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,92 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:26,424	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15))
2023-12-15 03:27:26,425	[INFO]	90      COMPILE_CODE_ERROR   +None  [90 edit(s)]      
2023-12-15 03:27:26,453	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,96 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:26,613	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5))
2023-12-15 03:27:26,614	[INFO]	91      COMPILE_CODE_ERROR   +None  [91 edit(s)]      
2023-12-15 03:27:26,643	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,100 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  if(b > c) {
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:26,800	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2))
2023-12-15 03:27:26,801	[INFO]	92      COMPILE_CODE_ERROR   +None  [92 edit(s)]      
2023-12-15 03:27:26,830	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,96 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  c = tmp;
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:26,985	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 1))
2023-12-15 03:27:26,986	[INFO]	93      COMPILE_CODE_ERROR   +None  [93 edit(s)]      
2023-12-15 03:27:27,015	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,96 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:27,171	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 1))
2023-12-15 03:27:27,172	[INFO]	94      COMPILE_CODE_ERROR   +None  [94 edit(s)]      
2023-12-15 03:27:27,193	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,96 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  tmp = a;
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:27,353	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1))
2023-12-15 03:27:27,354	[INFO]	95      COMPILE_CODE_ERROR   +None  [95 edit(s)]      
2023-12-15 03:27:27,383	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,96 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:27,542	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 1))
2023-12-15 03:27:27,543	[INFO]	96      COMPILE_CODE_ERROR   +None  [96 edit(s)]      
2023-12-15 03:27:27,573	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,96 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:27,717	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 20))
2023-12-15 03:27:27,719	[INFO]	97      COMPILE_CODE_ERROR   +None  [97 edit(s)]      
2023-12-15 03:27:27,748	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,96 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:27,906	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 0))
2023-12-15 03:27:27,908	[INFO]	98      COMPILE_CODE_ERROR   +None  [98 edit(s)]      
2023-12-15 03:27:27,937	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,101 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  return ISOSCELES;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:28,093	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 8))
2023-12-15 03:27:28,094	[INFO]	99      COMPILE_CODE_ERROR   +None  [99 edit(s)]      
2023-12-15 03:27:28,125	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,101 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  
+  a = c;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:28,289	[DEBUG]	ReturnDeletion(('triangle.cpp.xml', 'return', 2)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 21)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 7)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'if', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'expr_stmt', 6)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 30), ('triangle.cpp.xml', 'return', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 21)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'expr_stmt', 7)) | IfReplacement(('triangle.cpp.xml', 'if', 1), ('triangle.cpp.xml', 'stmt', 7)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 2)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 12)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 15), ('triangle.cpp.xml', 'if', 3)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'if', 5)) | IfDeletion(('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 10)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 18), ('triangle.cpp.xml', 'return', 3)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 10)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 3)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 4), ('triangle.cpp.xml', 'stmt', 17)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 14), ('triangle.cpp.xml', 'expr_stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 2)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 10), ('triangle.cpp.xml', 'if', 0)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'expr_stmt', 5)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'return', 3)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 1), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 17)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 1), ('triangle.cpp.xml', 'stmt', 16)) | ReturnDeletion(('triangle.cpp.xml', 'return', 0)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'decl_stmt', 0)) | IfDeletion(('triangle.cpp.xml', 'if', 2)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 9)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnDeletion(('triangle.cpp.xml', 'return', 3)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 13), ('triangle.cpp.xml', 'if', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 7), ('triangle.cpp.xml', 'if', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 11), ('triangle.cpp.xml', 'return', 2)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 2), ('triangle.cpp.xml', 'stmt', 12)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 22)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 6)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 7)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 4)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 4), ('triangle.cpp.xml', 'return', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 0)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 0), ('triangle.cpp.xml', 'stmt', 16)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 10)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 0), ('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 8)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 23), ('triangle.cpp.xml', 'expr_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 1), ('triangle.cpp.xml', 'if', 5)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'if', 1)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 12), ('triangle.cpp.xml', 'return', 3)) | IfDeletion(('triangle.cpp.xml', 'if', 3)) | ExprStmtReplacement(('triangle.cpp.xml', 'expr_stmt', 2), ('triangle.cpp.xml', 'stmt', 18)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 1)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 6), ('triangle.cpp.xml', 'if', 2)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 8), ('triangle.cpp.xml', 'decl_stmt', 0)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtInsertion(('triangle.cpp.xml', '_inter_block', 5), ('triangle.cpp.xml', 'expr_stmt', 5)) | DeclStmtDeletion(('triangle.cpp.xml', 'decl_stmt', 0)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 26), ('triangle.cpp.xml', 'if', 1)) | ReturnInsertion(('triangle.cpp.xml', '_inter_block', 9), ('triangle.cpp.xml', 'return', 3)) | IfReplacement(('triangle.cpp.xml', 'if', 5), ('triangle.cpp.xml', 'stmt', 12)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 15)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 24), ('triangle.cpp.xml', 'if', 5)) | DeclStmtReplacement(('triangle.cpp.xml', 'decl_stmt', 0), ('triangle.cpp.xml', 'stmt', 2)) | IfDeletion(('triangle.cpp.xml', 'if', 1)) | DeclStmtInsertion(('triangle.cpp.xml', '_inter_block', 19), ('triangle.cpp.xml', 'decl_stmt', 1)) | ExprStmtDeletion(('triangle.cpp.xml', 'expr_stmt', 1)) | ReturnDeletion(('triangle.cpp.xml', 'return', 1)) | ReturnReplacement(('triangle.cpp.xml', 'return', 0), ('triangle.cpp.xml', 'stmt', 20)) | IfInsertion(('triangle.cpp.xml', '_inter_block', 27), ('triangle.cpp.xml', 'if', 0)) | IfReplacement(('triangle.cpp.xml', 'if', 0), ('triangle.cpp.xml', 'stmt', 8)) | ReturnReplacement(('triangle.cpp.xml', 'return', 3), ('triangle.cpp.xml', 'stmt', 5))
2023-12-15 03:27:28,290	[INFO]	100     COMPILE_CODE_ERROR   +None  [100 edit(s)]     
2023-12-15 03:27:28,318	[DEBUG]	--- before: triangle.cpp
+++ after: triangle.cpp
@@ -1,45 +1,101 @@
 #include "triangle.hpp"
 
 void delay() {
-  const struct timespec ms = {0, (long int) (0.001*1e9)}; //tv_sec=0, tv_nsec (0.001 seconds)
+  double tmp;
+  nanosleep(&ms,NULL);
+  if(a + b <= c)
+    /*auto*/{
+      return INVALID;
+    }/*auto*/
+  if(a == b || b == c)
+    /*auto*/{
+      return ISOSCELES;
+    }/*auto*/ //tv_sec=0, tv_nsec (0.001 seconds)
   nanosleep(&ms,NULL); /*ignores possible errors*/
 }
 
 int classify_triangle(double a, double b, double c) {
+  a = b;
+  a = c;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+  return EQUILATERAL;
+  
+  
+  
+
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+      c = tmp;
+      if(a == b || b == c)
+        /*auto*/{
+          return ISOSCELES;
+        }/*auto*/
+    }/*auto*/
   double tmp;
-
-  delay();
+  return SCALENE;
+  if(b > c) {
+    if(a > c) {
+      tmp = a;
+      a = c;
+      c = tmp;
+    }
+    tmp = b;
+    if(a > b) {
+      tmp = a;
+      a = b;
+      b = tmp;
+    }
+    b = c;
+    c = tmp;
+  }
 
   // Sort the sides so that a <= b <= c
+  
+  a = c;
+  if(a == b && b == c)
+    /*auto*/{
+      return EQUILATERAL;
+    }/*auto*/
+
+  
+  double tmp;
+  const struct timespec ms = {0, (long int) (0.001*1e9)};
+
+  if(b > c) {
+    
+    tmp = b;
+    if(a == b || b == c)
+      /*auto*/{
+        return ISOSCELES;
+      }/*auto*/
+    b = c;
+    c = tmp;
+  }
+  if(a > c) {
+    tmp = a;
+    a = c;
+    c = tmp;
+  }
+  return SCALENE;
+
+  
+  c = tmp;
   if(a > b) {
     tmp = a;
     a = b;
     b = tmp;
   }
-
+  tmp = b;
+  tmp = b;
+  return ISOSCELES;
+  return SCALENE;
+  tmp = b;
+  return SCALENE;
+  tmp = a;
   if(a > c) {
     tmp = a;
     a = c;
     c = tmp;
   }
-
-  if(b > c) {
-    tmp = b;
-    b = c;
-    c = tmp;
-  }
-
-  if(a + b <= c)
-    /*auto*/{
-      return INVALID;
-    }/*auto*/
-  if(a == b && b == c)
-    /*auto*/{
-      return EQUILATERAL;
-    }/*auto*/
-  if(a == b || b == c)
-    /*auto*/{
-      return ISOSCELES;
-    }/*auto*/
-  return SCALENE;
 }

2023-12-15 03:27:28,319	[INFO]	==== END ====
2023-12-15 03:27:28,320	[INFO]	
2023-12-15 03:27:28,320	[INFO]	==== REPORT ====
2023-12-15 03:27:28,321	[INFO]	Termination: step budget
2023-12-15 03:27:28,322	[INFO]	Log file: /cs/student/ug/2020/damibose/projects/magpie/_magpie_logs/triangle-cpp_slow_1702610825.log
